import { getBackendConfig } from "./backendConfig"; // ← add

export const generateBashScript = (project) => {
  const commands = project.commands_preview || [];
  const palette = project.color_palette_preview;
  const backend = getBackendConfig(project.id); // ← add

  let script = `#!/bin/bash
# ${project.title} - Auto-generated setup script
# Generated on ${new Date().toISOString().split("T")[0]}
#
# How to run:
#   chmod +x setup.sh
#   ./setup.sh
#
# Notes:
# - This script was generated by Bash Stash.
# - Edit as needed, then re-run.

set -euo pipefail

`;

  if (project.description) {
    script += `# Description: ${project.description}\n\n`;
  }

  if (palette) {
    script += `# Color Variables from "${palette.name}" palette
export PRIMARY_COLOR="${palette.primary_hex}"
export SECONDARY_COLOR="${palette.secondary_hex}"
export ACCENT_COLOR="${palette.accent_hex}"
export BACKGROUND_COLOR="${palette.background_hex}"

`;
  }

  // ← add: optional backend section
  if (backend && (backend.models?.length || backend.relationships?.length)) {
    script += `# Backend Schema (preview)
# This section reflects your current Backend tab selections.
# You can wire this into codegen later.
cat > backend_schema.json <<'JSON'
${JSON.stringify(backend, null, 2)}
JSON

`;
  }

  if (commands.length > 0) {
    script += `# Project Commands
echo "🚀 Setting up ${project.title}..."

`;
    commands.forEach((cmd, index) => {
      script += `# ${cmd.label}
echo "Step ${index + 1}: ${cmd.label}"
${cmd.command_text}

`;
    });
    script += `echo "✅ ${project.title} setup complete!"
`;
  } else {
    script += `echo "🚀 ${project.title} - No commands configured yet"
`;
  }

  return script;
};
