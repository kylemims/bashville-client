import { useState } from "react";
import { ActionButton } from "../common/ActionButton.jsx";
import "./SetupGenerator.css";

export const SetupGenerator = ({ project, onClose }) => {
  const [activeTab, setActiveTab] = useState("bash");

  // Generate bash script
  const generateBashScript = () => {
    const commands = project.commands_preview || [];
    const palette = project.color_palette_preview;

    let script = `#!/bin/bash\n# ${project.title} - Auto-generated setup script\n# Generated on ${
      new Date().toISOString().split("T")[0]
    }\n\n`;

    // Add description if available
    if (project.description) {
      script += `# Description: ${project.description}\n\n`;
    }

    // Add color variables if palette exists
    if (palette) {
      script += `# Color Variables from "${palette.name}" palette\n`;
      script += `export PRIMARY_COLOR="${palette.primary_hex}"\n`;
      script += `export SECONDARY_COLOR="${palette.secondary_hex}"\n`;
      script += `export ACCENT_COLOR="${palette.accent_hex}"\n`;
      script += `export BACKGROUND_COLOR="${palette.background_hex}"\n\n`;
    }

    // Add commands
    if (commands.length > 0) {
      script += `# Project Commands\necho "🚀 Setting up ${project.title}..."\n\n`;
      commands.forEach((cmd, index) => {
        script += `# ${cmd.label}\necho "Step ${index + 1}: ${cmd.label}"\n${cmd.command_text}\n\n`;
      });
      script += `echo "✅ ${project.title} setup complete!"\n`;
    } else {
      script += `echo "🚀 ${project.title} - No commands configured yet"\n`;
    }

    return script;
  };

  // Generate README content
  const generateReadme = () => {
    const commands = project.commands_preview || [];
    const palette = project.color_palette_preview;

    let readme = `# ${project.title}\n\n`;

    // Add description
    if (project.description) {
      readme += `${project.description}\n\n`;
    }

    // Add color palette section
    if (palette) {
      readme += `## 🎨 Color Palette: ${palette.name}\n\n`;
      readme += `| Color | Hex Code | Preview |\n`;
      readme += `|-------|----------|----------|\n`;
      readme += `| Primary | \`${
        palette.primary_hex
      }\` | ![](https://via.placeholder.com/20x20/${palette.primary_hex.slice(1)}/000000?text=+) |\n`;
      readme += `| Secondary | \`${
        palette.secondary_hex
      }\` | ![](https://via.placeholder.com/20x20/${palette.secondary_hex.slice(1)}/000000?text=+) |\n`;
      readme += `| Accent | \`${
        palette.accent_hex
      }\` | ![](https://via.placeholder.com/20x20/${palette.accent_hex.slice(1)}/000000?text=+) |\n`;
      readme += `| Background | \`${
        palette.background_hex
      }\` | ![](https://via.placeholder.com/20x20/${palette.background_hex.slice(1)}/000000?text=+) |\n\n`;

      // Add CSS variables section
      readme += `### CSS Variables\n\n\`\`\`css\n`;
      readme += `:root {\n`;
      readme += `  --primary-color: ${palette.primary_hex};\n`;
      readme += `  --secondary-color: ${palette.secondary_hex};\n`;
      readme += `  --accent-color: ${palette.accent_hex};\n`;
      readme += `  --background-color: ${palette.background_hex};\n`;
      readme += `}\n\`\`\`\n\n`;
    }

    // Add setup section
    readme += `## 🚀 Quick Setup\n\n`;
    readme += `Run the setup script:\n\n`;
    readme += `\`\`\`bash\n`;
    readme += `chmod +x setup.sh\n`;
    readme += `./setup.sh\n`;
    readme += `\`\`\`\n\n`;

    // Add commands section
    if (commands.length > 0) {
      readme += `## 📋 Commands\n\n`;
      commands.forEach((cmd, index) => {
        readme += `### ${index + 1}. ${cmd.label}\n\n`;
        readme += `\`\`\`bash\n${cmd.command_text}\n\`\`\`\n\n`;
      });
    }

    // Add footer
    readme += `---\n\n`;
    readme += `*Generated by Bash Stash on ${new Date().toLocaleDateString()}*\n`;

    return readme;
  };

  const copyToClipboard = async (text) => {
    try {
      await navigator.clipboard.writeText(text);
      alert("✅ Copied to clipboard!");
    } catch (err) {
      console.error("Failed to copy:", err);
      alert("❌ Failed to copy. Please select and copy manually.");
    }
  };

  const downloadFile = (content, filename) => {
    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
  };

  const bashScript = generateBashScript();
  const readmeContent = generateReadme();

  return (
    <div className="setup-generator-overlay">
      <div className="setup-generator-modal">
        <div className="setup-generator-header">
          <h2>📋 Generate Setup Files</h2>
          <ActionButton onClick={onClose} variant="secondary" size="sm">
            ✕
          </ActionButton>
        </div>

        <div className="setup-generator-tabs">
          <button
            className={`tab-button ${activeTab === "bash" ? "active" : ""}`}
            onClick={() => setActiveTab("bash")}>
            🔧 setup.sh
          </button>
          <button
            className={`tab-button ${activeTab === "readme" ? "active" : ""}`}
            onClick={() => setActiveTab("readme")}>
            📖 README.md
          </button>
        </div>

        <div className="setup-generator-content">
          {activeTab === "bash" ? (
            <div className="file-preview">
              <div className="file-actions">
                <ActionButton onClick={() => copyToClipboard(bashScript)} variant="primary" size="sm">
                  📋 Copy
                </ActionButton>
                <ActionButton
                  onClick={() => downloadFile(bashScript, "setup.sh")}
                  variant="secondary"
                  size="sm">
                  💾 Download
                </ActionButton>
              </div>
              <pre className="code-preview">
                <code>{bashScript}</code>
              </pre>
            </div>
          ) : (
            <div className="file-preview">
              <div className="file-actions">
                <ActionButton onClick={() => copyToClipboard(readmeContent)} variant="primary" size="sm">
                  📋 Copy
                </ActionButton>
                <ActionButton
                  onClick={() => downloadFile(readmeContent, "README.md")}
                  variant="secondary"
                  size="sm">
                  💾 Download
                </ActionButton>
              </div>
              <pre className="code-preview">
                <code>{readmeContent}</code>
              </pre>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
