import React, { useState } from "react";
import JSZip from "jszip";
import { MaterialIcon } from "../common/MaterialIcon.jsx";
import { ActionButton } from "../common/ActionButton.jsx";
import "./ProjectDownloader.css";

const ProjectDownloader = ({ project, files, setupInstructions, onDownloadComplete }) => {
  const [isGenerating, setIsGenerating] = useState(false);

  const generateReadme = (project, files, instructions) => {
    const projectName = project?.title || "Generated Project";
    const projectType = project?.project_type || "static-tailwind";

    return `# ${projectName}

${project?.description || "A generated project created with Bashville - The Layout Stash System."}

## ðŸš€ Quick Start

${instructions.message}

### Setup Steps:
${instructions.steps.map((step, index) => `${index + 1}. \`${step}\``).join("\n")}

### What's Included:
${files
  .filter((f) => !f.path.startsWith("_"))
  .map((f) => `- \`${f.path}\``)
  .join("\n")}

### Development:
- \`npm run dev\` - Start development server
- \`npm run build\` - Build for production
- \`npm run preview\` - Preview production build

### Project Details:
- **Type**: ${projectType}
- **Framework**: React 18+ with Vite
- **Styling**: ${projectType.includes("tailwind") ? "Tailwind CSS" : "Custom CSS"}
- **Generated**: ${new Date().toLocaleDateString()}

### Color Palette:
${
  project?.color_palette_preview
    ? `- **Primary**: ${project.color_palette_preview.primary_hex}
- **Secondary**: ${project.color_palette_preview.secondary_hex}
- **Accent**: ${project.color_palette_preview.accent_hex}
- **Background**: ${project.color_palette_preview.background_hex}`
    : "No color palette specified"
}

### Next Steps:
1. **Customize the content** in \`src/App.jsx\`
2. **Modify styles** to match your brand
3. **Add new components** and pages
4. **Deploy to production** when ready

---

Generated by [Bashville - The Layout Stash System](https://bashville.app) ðŸŽ‰
`;
  };

  const downloadAsZip = async () => {
    setIsGenerating(true);

    try {
      const zip = new JSZip();
      const projectName = project?.title?.toLowerCase().replace(/[^a-z0-9]/g, "-") || "generated-project";

      // Add all project files
      files.forEach((file) => {
        zip.file(file.path, file.content);
      });

      // Add README.md
      const readme = generateReadme(project, files, setupInstructions);
      zip.file("README.md", readme);

      // Generate ZIP
      const content = await zip.generateAsync({
        type: "blob",
        compression: "DEFLATE",
        compressionOptions: {
          level: 6,
        },
      });

      // Create download link
      const url = window.URL.createObjectURL(content);
      const link = document.createElement("a");
      link.href = url;
      link.download = `${projectName}.zip`;

      // Trigger download
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      // Cleanup
      window.URL.revokeObjectURL(url);

      if (onDownloadComplete) {
        onDownloadComplete(projectName);
      }
    } catch (error) {
      console.error("Failed to generate ZIP:", error);
      throw error;
    } finally {
      setIsGenerating(false);
    }
  };

  const formatFileSize = (files) => {
    const totalBytes = files.reduce((sum, file) => sum + new Blob([file.content]).size, 0);
    if (totalBytes < 1024) return `${totalBytes} B`;
    if (totalBytes < 1024 * 1024) return `${(totalBytes / 1024).toFixed(1)} KB`;
    return `${(totalBytes / (1024 * 1024)).toFixed(1)} MB`;
  };

  const getFileIcon = (filename) => {
    const ext = filename.split(".").pop().toLowerCase();
    switch (ext) {
      case "jsx":
      case "js":
        return "code";
      case "css":
        return "palette";
      case "json":
        return "data_object";
      case "html":
        return "html";
      case "md":
        return "description";
      case "sh":
        return "terminal";
      default:
        return "description";
    }
  };

  return (
    <div className="project-downloader">
      <div className="download-summary">
        <h4>Download Project</h4>
        <p>Your project is ready! Download all files as a ZIP archive.</p>

        <div className="project-info">
          <div className="info-row">
            <span className="info-label">Project:</span>
            <span className="info-value">{project?.title || "Generated Project"}</span>
          </div>
          <div className="info-row">
            <span className="info-label">Type:</span>
            <span className="info-value">{project?.project_type || "static-tailwind"}</span>
          </div>
          <div className="info-row">
            <span className="info-label">Files:</span>
            <span className="info-value">{files.length} files</span>
          </div>
          <div className="info-row">
            <span className="info-label">Size:</span>
            <span className="info-value">{formatFileSize(files)}</span>
          </div>
        </div>

        <div className="file-list">
          <h5>Included Files:</h5>
          <div className="file-grid">
            {files.slice(0, 8).map((file, index) => (
              <div key={index} className="file-item-summary">
                <MaterialIcon
                  icon={getFileIcon(file.path)}
                  size={16}
                  color="var(--muted)"
                  className="file-icon"
                />
                <span className="file-path">{file.path}</span>
              </div>
            ))}
            {files.length > 8 && (
              <div className="file-item-summary more-files">
                <MaterialIcon icon="more_horiz" size={16} color="var(--muted)" />
                <span className="file-path">+ {files.length - 8} more files</span>
              </div>
            )}
          </div>
        </div>

        <div className="setup-preview">
          <h5>Setup Instructions:</h5>
          <div className="setup-steps">
            {setupInstructions.steps.map((step, index) => (
              <div key={index} className="setup-step">
                <span className="step-number">{index + 1}</span>
                <code className="step-command">{step}</code>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div className="download-actions">
        <ActionButton
          variant="primary"
          size="lg"
          onClick={downloadAsZip}
          disabled={isGenerating}
          className="download-btn">
          {isGenerating ? (
            <>
              <MaterialIcon icon="hourglass_empty" size={16} className="spinner" />
              Generating ZIP...
            </>
          ) : (
            <>
              <MaterialIcon icon="download" size={16} />
              Download Project ({formatFileSize(files)})
            </>
          )}
        </ActionButton>

        {project?.color_palette_preview && (
          <div className="color-info">
            <span>Colors: {project.color_palette_preview.name}</span>
            <div className="color-swatches">
              <div
                className="color-swatch"
                style={{ backgroundColor: project.color_palette_preview.primary_hex }}
                title={`Primary: ${project.color_palette_preview.primary_hex}`}
              />
              <div
                className="color-swatch"
                style={{ backgroundColor: project.color_palette_preview.secondary_hex }}
                title={`Secondary: ${project.color_palette_preview.secondary_hex}`}
              />
              <div
                className="color-swatch"
                style={{ backgroundColor: project.color_palette_preview.accent_hex }}
                title={`Accent: ${project.color_palette_preview.accent_hex}`}
              />
              <div
                className="color-swatch"
                style={{ backgroundColor: project.color_palette_preview.background_hex }}
                title={`Background: ${project.color_palette_preview.background_hex}`}
              />
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProjectDownloader;
